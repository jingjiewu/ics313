(new-location (hallway (you are in the petrology hallway. it is everything you expect out of a petrology floor. nothing.)))

(new-location (laboratory (you are in the petrology hallway. there are many computers, machines, and scientific instruments in this room. in the center of the lab is a machine with three spots to put things: a red-slot, a blue-slot, and a gray-slot.)))

(new-location (specimen-room (you are in the petrology specimen room. there are many rocks in this room of many diffrent colors, shapes and sizes. oh god, there are too many of them! they are all looking at me! oh no, i'm surrounded! tell me wife and children i love them! is what you read on a sign.)))

(new-location (display-room (you are in the petrology display room. there are many normal looking rocks in glasses cases. this main display is a gigantic boulder that looks like it weighs several tons.)))

;;variable for messages, message depends of order visited
(new-location (bathroom (you are in a bathroom. there isn't anything special about this room)))
(new-location (other-bathroom (you are in another bathroom. you have the feeling that there is something off with this room)))
(new-location (other-other-bathroom (you are in the third bathroom. enough with the bathrooms already! isn't this the petrology floor?! who's idea was it to have three bathrooms?!)))

;;not in macro specics but just need quik edits and pastes.
(new-path (laboratory specimen-room north door))
(new-path (laboratory hallway west door))
(new-path (hallway laboratory north-east door))
(new-path (hallway display-room north door))
(new-path (hallway bathroom west door))
(new-path (hallway other-bathroom east door))
(new-path (hallway other-other-bathroom north-west door))
(new-path (hallway elevator south door))
(new-path (specimen-room laboratory south door))
(new-path (specimen-room display-room west door))
(new-path (display-room hallway south door))
(new-path (bathroom hallway east door))
(new-path (other-bathroom hallway west door))
(new-path (other-other-bathroom hallway east door))
(new-path (elevator hallway floor-2 door))

(new-object red-rock display-room)
(new-object blue-rock display-room)
(new-object gray-rock specimen-room)
(new-object beaker laboratory)

(nconc *allowed commands* '(place fill dump empty splash))

(defparameter *beaker-state* 0)
(defparameter *red-placed* nil)
(defparameter *blue-placed* nil)
(defparameter *gray-placed* nil)

(defparameter *red-happy* nil)
(defparameter *blue-happy* nil)
(defparameter *gray-happy* nil)
(defparameter *floor-done* nil)

;;remove rock from inventory
(defun place (item slot)
  (cond ((and (eq item 'red-rock) (eq slot 'red-slot) (eq loc 'laboratory) (have 'red-rock) (not (*red-placed*)))
         (progn (setq *red-placed* 't) '(the red-rock fits perfectly!)))
        ((and (eq item 'blue-rock) (eq slot 'blue-slot) (eq loc 'laboratory) (have 'blue-rock) (not (*blue-placed*)))
         (progn (setq *blue-placed* 't) '(the blue-rock fits perfectly!)))
        ((and (eq item 'gray-rock) (eq slot 'gray-slot) (eq loc 'laboratory) (have 'gray-rock) (not (*gray-placed*)))
         (progn (setq *gray-placed* 't) '(the gray-rock fits perfectly!)))
        (t
         '(the rock machine stares at you as if you were stupid.))))
          
(defun fill (item)
  (cond ((and (eq item 'beaker) (have 'beaker) (eq *beaker-state* 0) (eq *location* 'bathroom))
         (progn (setq *beaker-state* 1) '(the beaker is now filled with cold water.)))
        ((and (eq item 'beaker) (have 'beaker) (eq *beaker-state* 0) (eq *location* 'other-bathroom))
         (progn (setq *beaker-state* 2) '(the beaker is now filled with rock water.)))
        ((and (eq item 'beaker) (have 'beaker) (eq *beaker-state* 0) (eq *location* 'other-other-bathroom))
         (progn (setq *beaker-state* 3) '(the beaker is now filled with hot water.)))
        ((and (eq item 'beaker) (have 'beaker) (not (eq *beaker-state* 0)) 
              (or (eq *location* 'bathroom) (eq *location* 'other-bathroom) (eq *location* 'other-other-bathroom)))
         (cond ((eq *beaker-state* 1) '(the beaker is already filled with cold water. you must empty or dump the beaker first.)
                (eq *beaker-state* 2) '(the beaker is already filled with rock water. you must empty or dump the beaker first.)
                (eq *beaker-state* 2) '(the beaker is already filled with hot water. you must empty or dump the beaker first.))))
        (t
         '(what are you trying to fill the beaker with?))))

(defun dump (item)
  (cond ((and (have 'beaker) (eq item 'beaker ) (eq *beaker-state* 0))
         '(unable to empty beaker. the beaker is already empty.))
        ((and
          (have 'beaker)
          (eq item 'beaker)
          (not (eq *beaker-state* 0)))
         (progn (setq *beaker-state* 0) '(the beaker is now empty.)))
        (t
         '(what are you trying to dump?))))

(defun splash (item obj)
  (cond ((and (eq item 'beaker) (have 'beaker) (eq *beaker-state* 0))
         '(you can't splash something with an empty beaker.))
        ((and (eq item 'beaker) (have 'beaker) (eq *beaker-state* 3) (eq obj 'red-rock) *red-placed* (eq *location* laboratory))
         (progn (setq *red-happy* 't) '(the red-rock is jolly!)))
        ((and (eq item 'beaker) (have 'beaker) (eq *beaker-state* 1) (eq obj 'blue-rock) *blue-placed* (eq *location* laboratory))
         (progn (setq *blue-happy* 't) '(the blue-rock is content!)))
        ((and (eq item 'beaker) (have 'beaker) (eq *beaker-state* 2) (eq obj 'gray-rock) *gray-placed* (eq *location* laboratory))
         (progn (setq *gray-happy* 't) '(the gray-rock doesn't hate you anymore!)))
        ((and (eq item 'beaker) (have 'beaker) (not (eq *beaker-state* 3)) (eq obj 'red-rock) *red-placed* (eq *location* laboratory))
         (progn (setq *beaker-state* 0) '(bzzzt. wrong. the red-rock punches you in the stomach and you spill the contents of your beaker.)))
        ((and (eq item 'beaker) (have 'beaker) (not (eq *beaker-state* 1)) (eq obj 'blue-rock) *blue-placed* (eq *location* laboratory))
         (progn (setq *beaker-state* 0) '(denied. the blue-rock stomps on your foot and you spill the contents of your beaker.)))
        ((and (eq item 'beaker) (have 'beaker) (not (eq *beaker-state* 2)) (eq obj 'gray-rock) *gray-placed* (eq *location* laboratory))
         (progn (setq *beaker-state* 0) '(no. the gray rock summons a metal pan to fall on your head and and you spill the contents of your beaker.) )
        (t
         '(what are you splashing exactly?)))
        
(defun status-check () 
  (cond 
   ((and *red-happy* *blue-happy* *gray-happy*) 
    '(floor completed message)))
)
